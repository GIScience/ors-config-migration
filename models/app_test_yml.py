# generated by datamodel-codegen:
#   filename:  application-test.yml
#   timestamp: 2024-03-13T11:07:57+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Cors(BaseModel):
    allowed_origins: Optional[str] = None
    allowed_headers: Optional[str] = None
    preflight_max_age: Optional[int] = None


class Matrix(BaseModel):
    maximum_routes: Optional[int] = None
    maximum_visited_nodes: Optional[int] = None


class Isochrones(BaseModel):
    maximum_intervals: Optional[int] = None


class Endpoints(BaseModel):
    matrix: Optional[Matrix] = None
    isochrones: Optional[Isochrones] = None


class Elevation(BaseModel):
    cache_path: Optional[str] = None


class Fastisochrones(BaseModel):
    enabled: Optional[bool] = None
    threads: Optional[int] = None
    weightings: Optional[str] = None
    maxcellnodes: Optional[int] = None


class Preparation(BaseModel):
    fastisochrones: Optional[Fastisochrones] = None


class ProfileDefault(BaseModel):
    elevation: Optional[bool] = None
    elevation_smoothing: Optional[bool] = None
    encoder_flags_size: Optional[int] = None
    maximum_snapping_radius: Optional[int] = None
    preparation: Optional[Preparation] = None


class EncoderOptions(BaseModel):
    turn_costs: Optional[bool] = None
    block_fords: Optional[bool] = None
    use_acceleration: Optional[bool] = None
    maximum_grade_level: Optional[int] = None
    conditional_access: Optional[bool] = None
    conditional_speed: Optional[bool] = None


class Ch(BaseModel):
    enabled: Optional[bool] = None
    threads: Optional[int] = None
    weightings: Optional[str] = None


class Lm(BaseModel):
    enabled: Optional[bool] = None
    threads: Optional[int] = None
    weightings: Optional[str] = None
    landmarks: Optional[int] = None


class Core(Lm):
    pass


class Methods(BaseModel):
    ch: Optional[Ch] = None
    lm: Optional[Lm] = None
    core: Optional[Core] = None


class Preparation1(BaseModel):
    min_network_size: Optional[int] = None
    methods: Optional[Methods] = None


class Lm1(BaseModel):
    active_landmarks: Optional[int] = None


class Core1(Lm1):
    pass


class Methods1(BaseModel):
    lm: Optional[Lm1] = None
    core: Optional[Core1] = None


class Execution(BaseModel):
    methods: Optional[Methods1] = None


class HeavyVehicle(BaseModel):
    restrictions: Optional[bool] = None


class Borders(BaseModel):
    boundaries: Optional[str] = None
    ids: Optional[str] = None
    openborders: Optional[str] = None


class RoadAccessRestrictions(BaseModel):
    use_for_warnings: Optional[bool] = None


class HereTraffic(BaseModel):
    enabled: Optional[bool] = None
    streets: Optional[str] = None
    ref_pattern: Optional[str] = None
    pattern_15min: Optional[str] = None
    radius: Optional[int] = None
    output_log: Optional[bool] = None
    log_location: Optional[str] = None


class ExtStorages(BaseModel):
    WayCategory: None = None
    HeavyVehicle: Optional[HeavyVehicle] = None
    WaySurfaceType: None = None
    Tollways: None = None
    Borders: Optional[Borders] = None
    RoadAccessRestrictions: Optional[RoadAccessRestrictions] = None
    HereTraffic: Optional[HereTraffic] = None


class Car(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions] = None
    preparation: Optional[Preparation1] = None
    execution: Optional[Execution] = None
    ext_storages: Optional[ExtStorages] = None


class EncoderOptions1(BaseModel):
    turn_costs: Optional[bool] = None
    block_fords: Optional[bool] = None
    use_acceleration: Optional[bool] = None


class Lm2(Lm):
    pass


class Core2(Lm):
    pass


class Methods2(BaseModel):
    ch: Optional[Ch] = None
    lm: Optional[Lm2] = None
    core: Optional[Core2] = None
    fastisochrones: Optional[Fastisochrones] = None


class Preparation2(BaseModel):
    min_network_size: Optional[int] = None
    methods: Optional[Methods2] = None


class Lm3(Lm1):
    pass


class Core3(Lm1):
    pass


class Methods3(BaseModel):
    lm: Optional[Lm3] = None
    core: Optional[Core3] = None


class Execution1(BaseModel):
    methods: Optional[Methods3] = None


class ExtStorages1(BaseModel):
    WayCategory: None = None
    HeavyVehicle: Optional[HeavyVehicle] = None
    WaySurfaceType: None = None
    Tollways: None = None
    Borders: Optional[Borders] = None
    HereTraffic: Optional[HereTraffic] = None


class Hgv(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    maximum_speed_lower_bound: Optional[int] = None
    encoder_options: Optional[EncoderOptions1] = None
    preparation: Optional[Preparation2] = None
    execution: Optional[Execution1] = None
    ext_storages: Optional[ExtStorages1] = None


class EncoderOptions2(BaseModel):
    consider_elevation: Optional[bool] = None
    turn_costs: Optional[bool] = None
    block_fords: Optional[bool] = None


class Core4(Lm):
    pass


class Methods4(BaseModel):
    core: Optional[Core4] = None


class Preparation3(BaseModel):
    min_network_size: Optional[int] = None
    methods: Optional[Methods4] = None


class Core5(Lm1):
    pass


class Methods5(BaseModel):
    core: Optional[Core5] = None


class Execution2(BaseModel):
    methods: Optional[Methods5] = None


class ExtStorages2(BaseModel):
    WayCategory: None = None
    WaySurfaceType: None = None
    HillIndex: None = None
    TrailDifficulty: None = None


class BikeRegular(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions2] = None
    preparation: Optional[Preparation3] = None
    execution: Optional[Execution2] = None
    ext_storages: Optional[ExtStorages2] = None


class BikeMountain(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    maximum_snapping_radius: Optional[int] = None
    encoder_options: Optional[EncoderOptions2] = None
    ext_storages: Optional[ExtStorages2] = None


class BikeRoad(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions2] = None
    ext_storages: Optional[ExtStorages2] = None


class BikeElectric(BikeRoad):
    pass


class EncoderOptions6(BaseModel):
    block_fords: Optional[bool] = None


class GreenIndex(BaseModel):
    filepath: Optional[str] = None


class NoiseIndex(GreenIndex):
    pass


class Csv(GreenIndex):
    pass


class ShadowIndex(GreenIndex):
    pass


class ExtStorages6(BaseModel):
    GreenIndex: Optional[GreenIndex] = None
    NoiseIndex: Optional[NoiseIndex] = None
    csv: Optional[Csv] = None
    ShadowIndex: Optional[ShadowIndex] = None
    WayCategory: None = None
    WaySurfaceType: None = None
    HillIndex: None = None
    TrailDifficulty: None = None


class Walking(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    interpolate_bridges_and_tunnels: Optional[bool] = None
    encoder_options: Optional[EncoderOptions6] = None
    ext_storages: Optional[ExtStorages6] = None


class ExtStorages7(BaseModel):
    GreenIndex: Optional[GreenIndex] = None
    NoiseIndex: Optional[NoiseIndex] = None
    ShadowIndex: Optional[ShadowIndex] = None
    WayCategory: None = None
    WaySurfaceType: None = None
    HillIndex: None = None
    TrailDifficulty: None = None


class Hiking(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions6] = None
    ext_storages: Optional[ExtStorages7] = None


class Wheelchair1(BaseModel):
    KerbsOnCrossings: Optional[bool] = None


class ExtStorages8(BaseModel):
    Wheelchair: Optional[Wheelchair1] = None
    WaySurfaceType: None = None
    WayCategory: None = None
    OsmId: None = None


class Wheelchair(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    maximum_snapping_radius: Optional[int] = None
    encoder_options: Optional[EncoderOptions6] = None
    ext_storages: Optional[ExtStorages8] = None


class PublicTransport(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions6] = None
    maximum_visited_nodes: Optional[int] = None
    gtfs_file: Optional[str] = None


class Profiles(BaseModel):
    car: Optional[Car] = None
    hgv: Optional[Hgv] = None
    bike_regular: Optional[BikeRegular] = Field(None, alias='bike-regular')
    bike_mountain: Optional[BikeMountain] = Field(None, alias='bike-mountain')
    bike_road: Optional[BikeRoad] = Field(None, alias='bike-road')
    bike_electric: Optional[BikeElectric] = Field(None, alias='bike-electric')
    walking: Optional[Walking] = None
    hiking: Optional[Hiking] = None
    wheelchair: Optional[Wheelchair] = None
    public_transport: Optional[PublicTransport] = Field(None, alias='public-transport')


class Engine(BaseModel):
    source_file: Optional[str] = None
    graphs_root_path: Optional[str] = None
    elevation: Optional[Elevation] = None
    profile_default: Optional[ProfileDefault] = None
    profiles: Optional[Profiles] = None


class ConditionItem(BaseModel):
    request_service: Optional[str] = None
    request_profile: Optional[str] = None
    request_preference: Optional[str] = None
    api_format: Optional[str] = None
    api_version: Optional[int] = None
    time_after: Optional[str] = None
    time_before: Optional[str] = None


class Message(BaseModel):
    active: Optional[bool] = None
    text: Optional[str] = None
    condition: Optional[List[ConditionItem]] = None


class Ors(BaseModel):
    cors: Optional[Cors] = None
    endpoints: Optional[Endpoints] = None
    engine: Optional[Engine] = None
    messages: Optional[List[Message]] = None


class OrsConfigYML(BaseModel):
    ors: Optional[Ors] = None
