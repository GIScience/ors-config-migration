# generated by datamodel-codegen:
#   filename:  application.yml
#   timestamp: 2024-03-13T10:49:52+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Whitelabel(BaseModel):
    enabled: Optional[bool] = None


class Error(BaseModel):
    whitelabel: Optional[Whitelabel] = None


class Servlet(BaseModel):
    context_path: Optional[str] = Field(None, alias='context-path')


class Server(BaseModel):
    port: Optional[int] = None
    error: Optional[Error] = None
    servlet: Optional[Servlet] = None


class Profiles(BaseModel):
    active: Optional[str] = None


class Servlet1(BaseModel):
    path: Optional[str] = None


class Mvc(BaseModel):
    servlet: Optional[Servlet1] = None


class Spring(BaseModel):
    profiles: Optional[Profiles] = None
    mvc: Optional[Mvc] = None


class SyntaxHighlight(BaseModel):
    activated: Optional[bool] = None


class SwaggerUi(BaseModel):
    enabled: Optional[bool] = None
    path: Optional[str] = None
    tryItOutEnabled: Optional[bool] = None
    filter: Optional[bool] = None
    syntaxHighlight: Optional[SyntaxHighlight] = None
    showExtensions: Optional[bool] = None


class ApiDocs(BaseModel):
    path: Optional[str] = None
    version: Optional[str] = None


class Springdoc(BaseModel):
    swagger_ui: Optional[SwaggerUi] = Field(None, alias='swagger-ui')
    api_docs: Optional[ApiDocs] = Field(None, alias='api-docs')
    packages_to_scan: Optional[str] = Field(None, alias='packages-to-scan')
    pathsToMatch: Optional[str] = None


class File(BaseModel):
    name: Optional[str] = None


class Pattern(BaseModel):
    console: Optional[str] = None
    file: Optional[str] = None


class Level(BaseModel):
    root: Optional[str] = None
    org_heigit: Optional[str] = Field(None, alias='org.heigit')


class Logging(BaseModel):
    file: Optional[File] = None
    pattern: Optional[Pattern] = None
    level: Optional[Level] = None


class Cors(BaseModel):
    allowed_origins: Optional[str] = None
    allowed_headers: Optional[str] = None
    preflight_max_age: Optional[int] = None


class Routing(BaseModel):
    enabled: Optional[bool] = None
    attribution: Optional[str] = None
    gpx_name: Optional[str] = None
    gpx_description: Optional[str] = None
    gpx_base_url: Optional[str] = None
    gpx_support_mail: Optional[str] = None
    gpx_author: Optional[str] = None
    gpx_content_licence: Optional[str] = None
    maximum_avoid_polygon_area: Optional[int] = None
    maximum_avoid_polygon_extent: Optional[int] = None
    maximum_alternative_routes: Optional[int] = None


class Matrix(BaseModel):
    enabled: Optional[bool] = None
    attribution: Optional[str] = None
    maximum_routes: Optional[int] = None
    maximum_routes_flexible: Optional[int] = None
    maximum_visited_nodes: Optional[int] = None
    maximum_search_radius: Optional[int] = None
    u_turn_costs: Optional[int] = None


class MaximumRangeDistanceItem(BaseModel):
    profiles: Optional[str] = None
    value: Optional[int] = None


class MaximumRangeTimeItem(MaximumRangeDistanceItem):
    pass


class Fastisochrones(BaseModel):
    maximum_range_distance_default: Optional[int] = None
    maximum_range_distance: Optional[List[MaximumRangeDistanceItem]] = None
    maximum_range_time_default: Optional[int] = None
    maximum_range_time: Optional[List[MaximumRangeTimeItem]] = None


class Isochrones(BaseModel):
    enabled: Optional[bool] = None
    attribution: Optional[str] = None
    maximum_locations: Optional[int] = None
    maximum_intervals: Optional[int] = None
    allow_compute_area: Optional[bool] = None
    maximum_range_distance_default: Optional[int] = None
    maximum_range_distance: Optional[List[MaximumRangeDistanceItem]] = None
    maximum_range_time_default: Optional[int] = None
    maximum_range_time: Optional[List[MaximumRangeTimeItem]] = None
    fastisochrones: Optional[Fastisochrones] = None


class Snap(BaseModel):
    enabled: Optional[bool] = None
    attribution: Optional[str] = None


class Endpoints(BaseModel):
    routing: Optional[Routing] = None
    matrix: Optional[Matrix] = None
    isochrones: Optional[Isochrones] = None
    Snap: Optional[Snap] = None


class Elevation(BaseModel):
    preprocessed: Optional[bool] = None
    data_access: Optional[str] = None
    cache_clear: Optional[bool] = None
    provider: Optional[str] = None
    cache_path: Optional[str] = None


class Lm(BaseModel):
    enabled: Optional[bool] = None
    threads: Optional[int] = None
    weightings: Optional[str] = None
    landmarks: Optional[int] = None


class Methods(BaseModel):
    lm: Optional[Lm] = None


class Preparation(BaseModel):
    min_network_size: Optional[int] = None
    methods: Optional[Methods] = None


class Lm1(BaseModel):
    active_landmarks: Optional[int] = None


class Methods1(BaseModel):
    lm: Optional[Lm1] = None


class Execution(BaseModel):
    methods: Optional[Methods1] = None


class ProfileDefault(BaseModel):
    enabled: Optional[bool] = None
    elevation: Optional[bool] = None
    elevation_smoothing: Optional[bool] = None
    encoder_flags_size: Optional[int] = None
    instructions: Optional[bool] = None
    optimize: Optional[bool] = None
    traffic: Optional[bool] = None
    maximum_distance: Optional[int] = None
    maximum_distance_dynamic_weights: Optional[int] = None
    maximum_distance_avoid_areas: Optional[int] = None
    maximum_waypoints: Optional[int] = None
    maximum_snapping_radius: Optional[int] = None
    maximum_distance_alternative_routes: Optional[int] = None
    maximum_distance_round_trip_routes: Optional[int] = None
    maximum_speed_lower_bound: Optional[int] = None
    maximum_visited_nodes: Optional[int] = None
    location_index_resolution: Optional[int] = None
    location_index_search_iterations: Optional[int] = None
    force_turn_costs: Optional[bool] = None
    interpolate_bridges_and_tunnels: Optional[bool] = None
    preparation: Optional[Preparation] = None
    execution: Optional[Execution] = None


class EncoderOptions(BaseModel):
    turn_costs: Optional[bool] = None
    block_fords: Optional[bool] = None
    use_acceleration: Optional[bool] = None


class Ch(BaseModel):
    enabled: Optional[bool] = None
    threads: Optional[int] = None
    weightings: Optional[str] = None


class Lm2(Lm):
    pass


class Core(BaseModel):
    enabled: Optional[bool] = None
    threads: Optional[int] = None
    weightings: Optional[str] = None
    landmarks: Optional[int] = None
    lmsets: Optional[str] = None


class Methods2(BaseModel):
    ch: Optional[Ch] = None
    lm: Optional[Lm2] = None
    core: Optional[Core] = None


class Preparation1(BaseModel):
    min_network_size: Optional[int] = None
    methods: Optional[Methods2] = None


class Lm3(Lm1):
    pass


class Core1(Lm1):
    pass


class Methods3(BaseModel):
    lm: Optional[Lm3] = None
    core: Optional[Core1] = None


class Execution1(BaseModel):
    methods: Optional[Methods3] = None


class RoadAccessRestrictions(BaseModel):
    use_for_warnings: Optional[bool] = None


class ExtStorages(BaseModel):
    WayCategory: None = None
    HeavyVehicle: None = None
    WaySurfaceType: None = None
    RoadAccessRestrictions: Optional[RoadAccessRestrictions] = None


class Car(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    elevation: Optional[bool] = None
    encoder_options: Optional[EncoderOptions] = None
    preparation: Optional[Preparation1] = None
    execution: Optional[Execution1] = None
    ext_storages: Optional[ExtStorages] = None


class Core2(Core):
    pass


class Methods4(BaseModel):
    ch: Optional[Ch] = None
    core: Optional[Core2] = None


class Preparation2(BaseModel):
    min_network_size: Optional[int] = None
    methods: Optional[Methods4] = None


class Core3(Lm1):
    pass


class Methods5(BaseModel):
    core: Optional[Core3] = None


class Execution2(BaseModel):
    methods: Optional[Methods5] = None


class HeavyVehicle(BaseModel):
    restrictions: Optional[bool] = None


class ExtStorages1(BaseModel):
    WayCategory: None = None
    HeavyVehicle: Optional[HeavyVehicle] = None
    WaySurfaceType: None = None


class Hgv(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_flags_size: Optional[int] = None
    encoder_options: Optional[EncoderOptions] = None
    maximum_distance: Optional[int] = None
    elevation: Optional[bool] = None
    preparation: Optional[Preparation2] = None
    execution: Optional[Execution2] = None
    ext_storages: Optional[ExtStorages1] = None


class EncoderOptions2(BaseModel):
    consider_elevation: Optional[bool] = None
    turn_costs: Optional[bool] = None
    block_fords: Optional[bool] = None


class ExtStorages2(BaseModel):
    WayCategory: None = None
    WaySurfaceType: None = None
    HillIndex: None = None
    TrailDifficulty: None = None


class BikeRegular(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions2] = None
    elevation: Optional[bool] = None
    ext_storages: Optional[ExtStorages2] = None


class BikeMountain(BikeRegular):
    pass


class BikeRoad(BikeRegular):
    pass


class BikeElectric(BikeRegular):
    pass


class EncoderOptions6(BaseModel):
    block_fords: Optional[bool] = None


class Walking(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions6] = None
    elevation: Optional[bool] = None
    ext_storages: Optional[ExtStorages2] = None


class Hiking(Walking):
    pass


class Wheelchair1(BaseModel):
    KerbsOnCrossings: Optional[bool] = None


class ExtStorages8(BaseModel):
    WayCategory: None = None
    WaySurfaceType: None = None
    Wheelchair: Optional[Wheelchair1] = None
    OsmId: None = None


class Wheelchair(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions6] = None
    elevation: Optional[bool] = None
    maximum_snapping_radius: Optional[int] = None
    ext_storages: Optional[ExtStorages8] = None


class PublicTransport(BaseModel):
    enabled: Optional[bool] = None
    profile: Optional[str] = None
    encoder_options: Optional[EncoderOptions6] = None
    elevation: Optional[bool] = None
    maximum_visited_nodes: Optional[int] = None
    gtfs_file: Optional[str] = None


class Profiles1(BaseModel):
    car: Optional[Car] = None
    hgv: Optional[Hgv] = None
    bike_regular: Optional[BikeRegular] = Field(None, alias='bike-regular')
    bike_mountain: Optional[BikeMountain] = Field(None, alias='bike-mountain')
    bike_road: Optional[BikeRoad] = Field(None, alias='bike-road')
    bike_electric: Optional[BikeElectric] = Field(None, alias='bike-electric')
    walking: Optional[Walking] = None
    hiking: Optional[Hiking] = None
    wheelchair: Optional[Wheelchair] = None
    public_transport: Optional[PublicTransport] = Field(None, alias='public-transport')


class Ors(BaseModel):
    cors: Optional[Cors] = None
    messages: Optional[List[Message]] = None
    endpoints: Optional[Endpoints] = None
    engine: Optional[Engine] = None


class ConditionItem(BaseModel):
    request_service: Optional[str] = None
    request_profile: Optional[str] = None
    request_preference: Optional[str] = None
    api_format: Optional[str] = None
    api_version: Optional[int] = None
    time_after: Optional[str] = None
    time_before: Optional[str] = None


class Message(BaseModel):
    active: Optional[bool] = None
    text: Optional[str] = None
    condition: Optional[List[ConditionItem]] = None


class Engine(BaseModel):
    source_file: None = None
    init_threads: Optional[int] = None
    preparation_mode: Optional[bool] = None
    graphs_root_path: Optional[str] = None
    graphs_data_access: Optional[str] = None
    elevation: Optional[Elevation] = None
    profile_default: Optional[ProfileDefault] = None
    profiles: Optional[Profiles1] = None


class OrsConfigYML(BaseModel):
    server: Optional[Server] = None
    spring: Optional[Spring] = None
    springdoc: Optional[Springdoc] = None
    logging: Optional[Logging] = None
    ors: Optional[Ors] = None
